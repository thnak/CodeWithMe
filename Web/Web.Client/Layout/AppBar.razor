@using Microsoft.AspNetCore.Components.Sections
@using Web.Client.Utils
@using AlignItems=MudBlazor.AlignItems
@using Color=MudBlazor.Color
@using MouseEvent=MudBlazor.MouseEvent

@implements IDisposable

<MudAppBar Class="pr-6"
           Dense Fixed
           Elevation="1">
    <MudIconButton Color="Color.Inherit"
                   Icon="@Icons.Material.Filled.Menu"
                   OnClick="@HandleDrawerOpen"/>

    <MudSpacer/>
    <MudStack AlignItems="AlignItems.Center" Row>
        <SectionOutlet SectionId="@TopBarSection"/>

        <CultureSelector/>

        <MudIconButton Class="blazor-SmAndDown-hidden" Color="Color.Inherit"
                       Icon="@(IsDarkMode.HasValue ? IsDarkMode.Value ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode : Icons.Material.Filled.AutoMode)"
                       OnClick="@ThemeModeChanged">
            @(IsDarkMode.HasValue ? IsDarkMode.Value ? AppLang.Dark_mode : AppLang.Light_mode : AppLang.System_preference)
        </MudIconButton>

        <MudMenu ActivationEvent="@MouseEvent.LeftClick" AnchorOrigin="Origin.BottomCenter"
                 TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudBadge Bordered Class="d-flex"
                          Color="Color.Success" Dot
                          Overlap>
                    <MudAvatar>
                        <MudImage Alt="HubClientUser.Me.UserName"
                                  Src=""/>
                    </MudAvatar>
                </MudBadge>
            </ActivatorContent>

            <ChildContent>
                <MudMenuItem Icon="@Icons.Material.Filled.AccountBox" Href="@PageRoutes.Account.Profile" IconColor="Color.Default">
                    @AppLang.Profile
                </MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" IconColor="Color.Default" OnClick="@LogOut">
                    @AppLang.Logout
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudStack>
</MudAppBar>

<style>
    .mud-badge.mud-badge-dot {
        height: 9px !important;
        width: 18px !important;
        border-radius: 999px !important;
        min-width: unset !important;
    }
</style>

@code {
    public static object TopBarSection = new();

    [Parameter] public EventCallback HandleDrawerOpen { get; set; }
    [Parameter] public MudThemeProvider? MudThemeProvider { get; set; } = default!;

    private bool? IsDarkMode { get; set; }


    protected override Task OnInitializedAsync()
    {
        CustomStateContainer.OnChanged += StateHasChanged;
        return Task.CompletedTask;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isDarkMode = await JsRuntime.InvokeAsync<string?>("localStorage.getItem", nameof(CustomStateContainer.IsDarkMode));
            if (isDarkMode != null)
            {
                IsDarkMode = bool.Parse(isDarkMode);
                CustomStateContainer.IsDarkMode = bool.Parse(isDarkMode);
            }
            else
            {
                IsDarkMode = null;
            }

        }
    }

    public void Dispose()
    {
        CustomStateContainer.OnChanged -= StateHasChanged;
    }

    private async Task ThemeModeChanged()
    {
        switch (IsDarkMode)
        {
            case null:
                IsDarkMode = true;
                CustomStateContainer.IsDarkMode = IsDarkMode.Value;
                await JsRuntime.SetLocalStorage(nameof(CustomStateContainer.IsDarkMode), IsDarkMode.Value);
                break;
            case true:
                IsDarkMode = false;
                CustomStateContainer.IsDarkMode = IsDarkMode.Value;
                await JsRuntime.SetLocalStorage(nameof(CustomStateContainer.IsDarkMode), IsDarkMode.Value);
                break;
            case false:
                IsDarkMode = null;
                if (MudThemeProvider != null) CustomStateContainer.IsDarkMode = await MudThemeProvider.GetSystemPreference();
                await JsRuntime.RemoveLocalStorage(nameof(CustomStateContainer.IsDarkMode));
                break;
        }


        if (MudThemeProvider != null)
        {
            CustomStateContainer.IsDarkMode = MudThemeProvider.IsDarkMode;
        }

        await InvokeAsync(StateHasChanged);
    }


    private async Task LogOut()
    {
        await JsRuntime.ClearLocalStorage();
        await JsRuntime.ClearSessionStorage();
        await JsRuntime.LocationReplace("api/Account/signout");
    }
}