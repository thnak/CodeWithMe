@using BusinessModels.Resources
@using Color=MudBlazor.Color
@using Align=MudBlazor.Align
@attribute [Route(PageRoutes.Account.Login)]
@rendermode InteractiveWebAssembly

<MudForm Model="Model" @bind-Errors="@FormError"
         @ref="MudForm" IsValid="@IsValid" IsValidChanged="ValidChanged"
         UserAttributes="UserAttributes">
    <AntiforgeryToken />

    <MudStack Class="login-card ma-auto" Spacing="8">
        <MudStack AlignItems="AlignItems.Center">
        </MudStack>
        <MudStack>
            <MudText Align="Align.Start" Style="font-weight: bold;" Typo="Typo.h5">
                <b></b>
            </MudText>
            <MudTextField AutoFocus
                          @bind-Value="Model.UserName"
                          For="() => Model.UserName"
                          Required
                          UserAttributes="@(new Dictionary<string, object> { { "name", "Username" }, { "autocomplete", "current-username" } })"
                          ErrorText="@ErrorMessage" Error="@(!IsValid)"
                          Variant="Variant.Outlined"/>

            <MudTextField Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          @bind-Value="Model.Password"
                          For="() => Model.Password"
                          InputType="@PasswordInput"
                          OnAdornmentClick="PasswordIconClick"
                          Required
                          UserAttributes="@(new Dictionary<string, object> { { "name", "Password" }, { "autocomplete", "current-password" } })"
                          Variant="Variant.Outlined"/>

            <MudTextField Adornment="Adornment.End" @bind-Value="Model.ReturnUrl"
                          Class="d-none" Required="false"
                          UserAttributes="@(new Dictionary<string, object> { { "name", "ReturnUrl" } })"
                          Variant="Variant.Outlined"/>
            <MudButton ButtonType="ButtonType.Submit"
                       Class="rounded-pill"
                       Color="Color.Primary"
                       FullWidth Variant="Variant.Filled">
                Sign_in
            </MudButton>
        </MudStack>
    </MudStack>
</MudForm>

@* <form id="loginForm" method="post" action="/api/User/Login"> *@
@*     <input type="hidden" name="__RequestVerificationToken"/> *@
@*     <AntiforgeryToken/> *@
@*     <div class="form-group"> *@
@*         <label for="UserName">Username</label> *@
@*         <input type="text" class="form-control" id="UserName" name="UserName" required /> *@
@*     </div> *@
@*     <div class="form-group"> *@
@*         <label for="Password">Password</label> *@
@*         <input type="password" class="form-control" id="Password" name="Password" required /> *@
@*     </div> *@
@*     <button type="submit" class="btn btn-primary">Login</button> *@
@* </form> *@
@* *@
@* <script> *@
@*     document.getElementById('loginForm').addEventListener('submit', function (event) { *@
@*         event.preventDefault(); *@
@*         var formData = new FormData(this); *@
@* *@
@*         fetch('/api/User/Login', { *@
@*             method: 'POST', *@
@*             headers: { *@
@*                 'X-XSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value, *@
@*                 'Content-Type': 'application/json' *@
@*             }, *@
@*             body: JSON.stringify({ *@
@*                 UserName: formData.get('UserName'), *@
@*                 Password: formData.get('Password') *@
@*             }) *@
@*         }) *@
@*         .then(response => response.json()) *@
@*         .then(data => { *@
@*             if (data.message) { *@
@*                 alert(data.message); *@
@*             } else { *@
@*                 window.location.href = '/'; *@
@*             } *@
@*         }) *@
@*         .catch(error => console.error('Error:', error)); *@
@*     }); *@
@* </script> *@