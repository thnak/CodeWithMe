@rendermode InteractiveAuto
@using System.Diagnostics
@attribute [Route("/counter")]

<PageTitle>.NET Worker Multithreading</PageTitle>

<HeadContent>
    <HeadContentContainer MetaProperty="@Metadata" />
</HeadContent>

<div class="row" >
    <div class="col-6 col-xs-12" >
        <h1>.NET Worker Multithreading</h1>

        Welcome to your new multithreaded app.

        <br /><br />
        Pi estimation demo. Specify number of iterations.<br />
        <MudNumericField @bind-Value="_piIterations" T="int" ></MudNumericField>
        Specify number of workers to use.<br />
        <input @bind="WorkerNum" placeholder="Number of workers" type="text" /><br /><br />
        <MudButton OnClick="@OnClick" >Run test</MudButton>
        @foreach (var workerProgress in _piProgress.Take(WorkerNum))
        {
            <progress max="100" value="@(workerProgress.Progress)" ></progress>
            <br />
        }

        <br />
        <br />
        <strong>Output:</strong>
        <hr />
        <pre>
@Output
</pre>
    </div>
    <div class="col-6 col-xs-12" >
    </div>
</div>


@code {

    #region Models

    private class PiProgress
    {
        public int Progress { get; init; }
    }

    private IWorkerFactory? WorkerFactory { get; set; }

    protected override void OnInitialized()
    {
        var currentLanguage = CultureInfo.CurrentCulture.Name;
        switch (currentLanguage)
        {
            case "vi-VN":
                Metadata.Add(new Dictionary<string, string>() { { "name", "description" }, { "content", ".NET WASM bản xem trước đa luồng" } });
                Metadata.Add(new Dictionary<string, string>() { { "name", "title" }, { "content", ".NET WASM đa luồng" } });
                break;
            case "en-US":
                Metadata.Add(new Dictionary<string, string>() { { "name", "description" }, { "content", ".NET WASM Worker Multithreading demo app" } });
                Metadata.Add(new Dictionary<string, string>() { { "name", "title" }, { "content", ".NET WASM Worker Multithreading" } });
                break;
        }



        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            WorkerFactory = new WorkerFactory(JsRuntime);
        }

        base.OnAfterRender(firstRender);
    }

    /// <summary>
    ///     This service runs inside the worker.
    /// </summary>
    private class MathsService
    {
        public event EventHandler<PiProgress>? Pi;

        private IEnumerable<int> AlternatingSequence(int start = 0)
        {
            int i;
            bool flip;
            if (start == 0)
            {
                yield return 1;
                i = 1;
                flip = false;
            }
            else
            {
                i = start * 2 - 1;
                flip = start % 2 == 0;
            }

            while (true) yield return ((flip == !flip) ? -1 : 1) * (i += 2);
            // ReSharper disable once IteratorNeverReturns
        }

        public double EstimatePiSlice(int sumStart, int sumLength)
        {
            Console.WriteLine($@"EstimatePISlice({sumStart},{sumLength})");
            var lastReport = 0;
            return AlternatingSequence(sumStart)
                .Take(sumLength)
                .Select((x, i) =>
                {
                    // Keep reporting events down a bit, serialization is expensive!
                    var progressDelta = Math.Abs(i - lastReport) / (double)sumLength * 100;
                    if (progressDelta > 3 || i >= sumLength - 1)
                    {
                        lastReport = i;
                        Pi?.Invoke(this, new PiProgress { Progress = i });
                    }

                    return x;
                })
                .Sum(x => 1.0 / x);
        }
    }

    #endregion


    int _piIterations = 5_000_000;
    int _sliceSize;

    int _workerNum = 1;

    int WorkerNum
    {
        get => _workerNum;
        set
        {
            if (value < 1)
            {
                _workerNum = 1;
            }
            else if (value > 15)
            {
                _workerNum = 15;
            }
            else
            {
                _workerNum = value;
            }
        }
    }

    string Output { get; set; } = string.Empty;
    private List<Dictionary<string, string>> Metadata { get; set; } = [];

    public class ProgressRef
    {
        public int Progress { get; set; }
    }

    readonly List<ProgressRef> _piProgress = new();
    readonly List<IWorker> _workers = new();

    readonly List<IWorkerBackgroundService<MathsService>> _backgroundServices = new();


    private async Task OnClick(EventArgs _)
    {
        _piProgress.ForEach(p => p.Progress = 0);
        Output = "";
        var rn = Environment.NewLine;
        try
        {
            _sliceSize = (int)Math.Floor((decimal)_piIterations / WorkerNum);

            while (_workers.Count() < WorkerNum)
            {
                Output += $"{rn}{LogDate()} Initializing a worker.";
                StateHasChanged();
                if (WorkerFactory != null)
                {
                    var worker = await WorkerFactory.CreateAsync();
                    _workers.Add(worker);
                    var service = await worker.CreateBackgroundServiceAsync<MathsService>();


                    _backgroundServices.Add(service);
                    var progressRef = new ProgressRef();
                    _piProgress.Add(progressRef);
                    await service.RegisterEventListenerAsync<PiProgress>(nameof(MathsService.Pi),
                        (_, eventInfo) =>
                        {
                            progressRef.Progress = (int)Math.Floor(100 * ((decimal)eventInfo.Progress / _sliceSize));
                            StateHasChanged();
                        });
                }
            }

            var start = 0;
            var sw = new Stopwatch();
            sw.Start();
            var allTasks = new List<Task<double>>();
            var servicesStarted = 0;
            foreach (var backgroundService in _backgroundServices.Take(WorkerNum))
            {
                var end = start + _sliceSize;

                var localStart = start;
                var localSliceSize = _sliceSize;
                Output += $"{rn}{LogDate()} Worker {servicesStarted + 1}: EstimatePISlice({localStart},{localSliceSize})...";
                var task = backgroundService.RunAsync(s => s.EstimatePiSlice(localStart, localSliceSize));
                allTasks.Add(task);

                start = end;
                servicesStarted++;
            }

            var result = await Task.WhenAll(allTasks.ToArray()).ContinueWith(t => 4 * t.Result.Sum());

            sw.Stop();
            Output += $"{rn}{LogDate()} All calls complete.";
            Output += $"{rn}{LogDate()} EstimatePISlice({_piIterations}) = {result}" +
                      $"{rn}   (Workers: {WorkerNum} Time: {sw.Elapsed})";
            _piProgress.ForEach(p => p.Progress = 100);

            StateHasChanged();
        }
        catch (Exception e)
        {
            Output = $"{rn}Error = {e}";
        }
    }

    private string LogDate()
    {
        return DateTime.Now.ToString("HH:mm:ss:fff");
    }

    private async Task TryToRedirect()
    {
        var response = await ApiService.GetAsync<string>("/WeatherForecast/try-http-redirect");
        ToastService.ShowSuccess(response.Message);
    }

}